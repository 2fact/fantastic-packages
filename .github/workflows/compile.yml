name: Compile packages and Build images

on:
  workflow_call:
    inputs:
      build_mode:
        required: false
        type: string
      no_img:
        required: false
        type: boolean
      TPATH:
        required: true
        type: string
      VERSION:
        required: true
        type: string
      TARGET:
        required: true
        type: string
      ARCH:
        required: true
        type: string
      USIGN_ID:
        required: true
        type: string
      GPG_ID:
        required: false
        type: string

env:
# 使用 GPG 签名 Packages (非必要)
  GPG_SIGN: true
# Pre-download Libraries
  PRE_DOWNLOAD: false
# 删除无用文件以增加编译空间
  DELETE_USELESS_FILES: true
### 结束

jobs:
  compile:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # To push a branch
      # pull-requests: write  # To create a PR from that branch
    env:
      TPATH: ${{ inputs.TPATH }}
      VERSION: ${{ inputs.VERSION }}
      TARGET: ${{ inputs.TARGET }}
      ARCH: ${{ inputs.ARCH }}
      USIGN_ID: ${{ inputs.USIGN_ID }}
      USIGN_KEY: ${{ secrets[format('USIGN_{0}', inputs.USIGN_ID )] }}
      GPG_ID: ${{ inputs.GPG_ID }}
      GPG_PW: ${{ secrets[format('GPG_PW_{0}', inputs.GPG_ID )] }}
      GPG_KEY: ${{ secrets[format('GPG_{0}', inputs.GPG_ID )] }}

    steps:
      - name: Maximize Build Space
        if: env.DELETE_USELESS_FILES == 'true' && !cancelled()
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 5120
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get update
          sudo -E apt-get -y install curl tar gzip bash gpg build-essential clang flex bison g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget libncursesw5-dev xsltproc python3
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          if [ "${{ env.DELETE_USELESS_FILES }}" == "true" ]
          then
              docker rmi $(docker images -q)
              sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php
              sudo -E apt-get -y autoremove --purge
              sudo -E apt-get clean
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'master'
          lfs: true
          submodules: true

      - name: Initialize OpenWRT SDK
        shell: bash
        run: |
          mkdir -p "/workdir/DL"
          sdk=$(curl --connect-timeout 10 --retry 3 -sSL https://downloads.openwrt.org/releases/$VERSION/targets/$TARGET | grep 'openwrt-sdk' | sed -En 's|.+\bhref="([^"]+)".+|\1|p')
          curl --connect-timeout 10 --retry 3 -sSL -o "/workdir/$sdk" https://downloads.openwrt.org/releases/$VERSION/targets/$TARGET/$sdk
          [ "$?" == 0 ] && {
            tar -C "/workdir" -xf "/workdir/$sdk"
            rm -f "/workdir/$sdk"
            mv "/workdir/${sdk%.tar.*}" "/workdir/sdk-$VERSION-${TARGET//\//-}"
            pushd "/workdir/sdk-$VERSION-${TARGET//\//-}" && umask 022
            pushd "/workdir/sdk-$VERSION-${TARGET//\//-}/package" && umask 022
            ln -s "$GITHUB_WORKSPACE" "fantastic-packages"
            popd
            rm -rf dl 2>/dev/null
            ln -s "/workdir/DL" dl
            ./scripts/feeds update -a
            ./scripts/feeds install -a
            make defconfig
            sed -i 's,CONFIG_LUCI_CSSTIDY=y,# CONFIG_LUCI_CSSTIDY is not set,' .config
            popd
          }

      - name: Pre-download Libraries
        shell: bash
        if: env.PRE_DOWNLOAD == 'true' && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        run: |
          [ -d "/workdir/sdk-$VERSION-${TARGET//\//-}" ] && {
            pushd "/workdir/sdk-$VERSION-${TARGET//\//-}"
            make download -j$(($(nproc)+1))
            popd
          }

      - name: Build Packages
        shell: bash
        if: (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        run: |
          [ -d "/workdir/sdk-$VERSION-${TARGET//\//-}" ] && {
            pushd "/workdir/sdk-$VERSION-${TARGET//\//-}"
            make package/fantastic-packages/compile V=99
            popd
          }

      - name: Checkout Packages
        shell: bash
        if: (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        run: |
          export PATH="$PATH:/workdir/sdk-$VERSION-${TARGET//\//-}/staging_dir/host/bin"
          sudo chmod -R +x "/workdir/sdk-$VERSION-${TARGET//\//-}/staging_dir/host/bin/"
          export MKHASH="/workdir/sdk-$VERSION-${TARGET//\//-}/staging_dir/host/bin/mkhash"
          sudo chmod +x "/workdir/sdk-$VERSION-${TARGET//\//-}/scripts/ipkg-make-index.sh"
          #
          if [ "${{env.GPG_SIGN}}" == "true" ]; then
            gpg --batch --pinentry-mode=loopback --yes --passphrase "$(echo -n "${GPG_PW}")" --import <(echo "${GPG_KEY}")
            echo "$(sed 's|\s||g' "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.finger"):6:" | gpg --import-ownertrust
          fi
          #
          sign_packages() {
            # usign
            # ref: SDK/package/Makefile:index:
            "/workdir/sdk-$VERSION-${TARGET//\//-}/scripts/ipkg-make-index.sh" . 2>&1 > Packages.manifest
            grep -vE '^(Maintainer|LicenseFiles|Source|SourceName|Require|SourceDateEpoch)' Packages.manifest > Packages
            case "$(((64 + $(stat -L -c%s Packages)) % 128))" in 110|111)
              # WARNING: Applying padding in $$d/Packages to workaround usign SHA-512 bug!
              { echo ""; echo ""; } >> Packages;;
            esac
            gzip -9nc Packages > Packages.gz
            # ref: SDK/package/Makefile:CONFIG_SIGNED_PACKAGES
            usign -S -m Packages -s <(echo "${USIGN_KEY}")
            # gpg
            if [ "${{env.GPG_SIGN}}" == "true" ]; then
              gpg -u ${GPG_ID} --batch --pinentry-mode=loopback --yes --passphrase "$(echo -n "${GPG_PW}")" -a -o Packages.asc --detach-sign Packages
            fi
          }
          #
          eval "$(cat $GITHUB_WORKSPACE/Makefile|sed -En '/^\s*DEPENDS/,/^endef/{/^\s*(DEPENDS:=|\+)/p}'|tr '\n' ' '|sed -E "s|[:+\\]||g;s|\bluci-app-|luci-*-|g;s|\s+| |g;s|= *|='|;s|\s*$|'|")"
          REGEXP="$(echo "$DEPENDS"|sed 's| |*.ipk -or -name |g;s|^|-name |;s|$|*.ipk|')"
          mkdir -p "$GITHUB_WORKSPACE/$TPATH" 2>/dev/null
          if [ -d "/workdir/sdk-$VERSION-${TARGET//\//-}" ]; then
            rm -rf   "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/packages/$ARCH/packages" 2>/dev/null
            mkdir -p "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/packages/$ARCH/packages" 2>/dev/null
            rm -rf   "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/packages/$ARCH/luci" 2>/dev/null
            mkdir -p "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/packages/$ARCH/luci" 2>/dev/null
            eval $(find "/workdir/sdk-$VERSION-${TARGET//\//-}/bin/packages/$ARCH/" -type f $REGEXP | sed -E 's|^(.+)$|mv -f "\1" "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/packages/$ARCH/packages/"; |g;s|\$|\$|g')
            eval $(find "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/packages/$ARCH/packages/" -type f -name luci-*.ipk | sed -E 's|^(.+)$|mv -f "\1" "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/packages/$ARCH/luci/"; |g;s|\$|\$|g')
            pushd "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/packages/$ARCH/packages"; sign_packages; popd
            pushd "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/packages/$ARCH/luci"; sign_packages; popd
            #
            pushd "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}"
            cp -f "$GITHUB_WORKSPACE/keys/usign/${USIGN_ID}.pub" ${USIGN_ID}.pub
            USIGN_PUBKEY="$(cat ${USIGN_ID}.pub)"
          cat <<- EOF > ${USIGN_ID}.sh
          #!/bin/sh
          KEYID=${USIGN_ID}
          mkdir -p /etc/opkg/keys 2>/dev/null
          cat <<- PUBKEY > /etc/opkg/keys/\${KEYID,,}
          ${USIGN_PUBKEY}
          PUBKEY
          EOF
            if [ "${{env.GPG_SIGN}}" == "true" ]; then
              cp -f "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.finger" ${GPG_ID}.gpg.finger
              cp -f "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.pub" ${GPG_ID}.gpg.pub
              cp -f "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.rev" ${GPG_ID}.gpg.rev
            fi
            popd
          fi

      - name: Checkout Releases whitout compile
        shell: bash
        if: inputs.no_img == 0 && inputs.build_mode == 'build_imgs' && !cancelled()
        run: |
          git remote update
          git checkout origin/gh-pages -- $TPATH/

      - name: Initialize OpenWRT ImageBuilder
        shell: bash
        run: |
          imgbd=$(curl --connect-timeout 10 --retry 3 -sSL https://downloads.openwrt.org/releases/$VERSION/targets/$TARGET | grep 'openwrt-imagebuilder' | sed -En 's|.+\bhref="([^"]+)".+|\1|p')
          curl --connect-timeout 10 --retry 3 -sSL -o "/workdir/$imgbd" https://downloads.openwrt.org/releases/$VERSION/targets/$TARGET/$imgbd
          [ "$?" == 0 ] && {
            tar -C "/workdir" -xf "/workdir/$imgbd"
            rm -f "/workdir/$imgbd"
            mv "/workdir/${imgbd%.tar.*}" "/workdir/imagebuilder-$VERSION-${TARGET//\//-}"
          }

      - name: Build Images
        env:
          ROOTFS_SIZE: 256
        if: inputs.no_img == 0 && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_imgs') && !cancelled()
        shell: bash
        run: |
          [ -d "/workdir/imagebuilder-$VERSION-${TARGET//\//-}" ] && {
            pushd "/workdir/imagebuilder-$VERSION-${TARGET//\//-}"
            sed -i "s|\(\bCONFIG_TARGET_ROOTFS_PARTSIZE\)=.*|\1=${ROOTFS_SIZE}|" .config
            eval $(find "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/packages/$ARCH/" -type f -name *.ipk | sed -E 's|^(.+)$|cp -f "\1" packages/; |g;s|\$|\$|g')
            make image PACKAGES="$(echo $(cat "$GITHUB_WORKSPACE/.github/workflows/prebuildpackages/$ARCH"))"
            popd
          }

      - name: Checkout Images
        shell: bash
        if: inputs.no_img == 0 && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_imgs') && !cancelled()
        run: |
          export PATH="$PATH:/workdir/sdk-$VERSION-${TARGET//\//-}/staging_dir/host/bin"
          sudo chmod -R +x "/workdir/sdk-$VERSION-${TARGET//\//-}/staging_dir/host/bin/"
          #
          if [ -d "/workdir/imagebuilder-$VERSION-${TARGET//\//-}" ]; then
            rm -rf   "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/targets/$TARGET" 2>/dev/null
            mkdir -p "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/targets/$TARGET" 2>/dev/null
            mv "/workdir/imagebuilder-$VERSION-${TARGET//\//-}/bin/targets/$TARGET/"* "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/targets/$TARGET/"
            pushd "$GITHUB_WORKSPACE/$TPATH/${VERSION%.*}/targets/$TARGET"
            usign -S -m sha256sums -s <(echo "${USIGN_KEY}")
            if [ "${{env.GPG_SIGN}}" == "true" ]; then
              gpg --batch --pinentry-mode=loopback --yes --passphrase "$(echo -n "${GPG_PW}")" --import <(echo "${GPG_KEY}")
              echo "$(sed 's|\s||g' "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.finger"):6:" | gpg --import-ownertrust
              gpg -u ${GPG_ID} --batch --pinentry-mode=loopback --yes --passphrase "$(echo -n "${GPG_PW}")" -a -o sha256sums.asc --detach-sign sha256sums
            fi
            popd
          fi

      - name: Generate artifact name
        run: |
          echo "artifact=OpenWRT-Build-$VERSION-${TARGET//\//-}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact }}
          path: |
            ${{ env.TPATH }}/
          retention-days: 3
