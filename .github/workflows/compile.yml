name: Compile packages and Build images

on:
  workflow_call:
    inputs:
      build_mode:
        required: false
        type: string
      no_img:
        required: false
        type: boolean
      TPATH:
        required: true
        type: string
      VERSION:
        required: true
        type: string
      TARGET:
        required: false
        type: string
      SUBTARGET:
        required: false
        type: string
      PROFILE:
        required: false
        type: string
      ARCH:
        required: true
        type: string
      USIGN_ID:
        required: true
        type: string
      GPG_ID:
        required: false
        type: string

env:
# 使用 GPG 签名 Packages (非必要)
  GPG_SIGN: true
# Cache Libraries
  CACHE_DOWNLOAD: true
# 删除无用文件以增加编译空间
  DELETE_USELESS_FILES: true
# Artifact retention days
  ARTIFACT_RETENTION_DAYS: 3
### 结束

jobs:
  compile:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # To push a branch
      # pull-requests: write  # To create a PR from that branch
    env:
      TPATH: ${{ inputs.TPATH }}
      VERSION: ${{ inputs.VERSION }}
      TARGET: ${{ inputs.TARGET }}
      SUBTARGET: ${{ inputs.SUBTARGET }}
      PROFILE: ${{ inputs.PROFILE }}
      ARCH: ${{ inputs.ARCH }}
      USIGN_ID: ${{ inputs.USIGN_ID }}
      USIGN_KEY: ${{ secrets[format('USIGN_{0}', inputs.USIGN_ID )] }}
      GPG_ID: ${{ inputs.GPG_ID }}
      GPG_PW: ${{ secrets[format('GPG_PW_{0}', inputs.GPG_ID )] }}
      GPG_KEY: ${{ secrets[format('GPG_{0}', inputs.GPG_ID )] }}

    steps:
      - name: Maximize Build Space
        if: env.DELETE_USELESS_FILES == 'true' && !cancelled()
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 5120
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          if [ "${{ env.DELETE_USELESS_FILES }}" == "true" ]
          then
              docker rmi $(docker images -q)
              sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php
              sudo -E apt-get -y autoremove --purge
              sudo -E apt-get clean
          fi

      - name: Determine branch name
        run: |
          BRANCH="${VERSION%.*}"
          echo "Building for $BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          lfs: true
          submodules: true

      - name: Import keys
        shell: bash
        run: |
          # usign
          USIGN_PUBKEY="$(cat $GITHUB_WORKSPACE/keys/usign/${USIGN_ID}.pub)"
          echo "USIGN_PUBKEY=$USIGN_PUBKEY" >> $GITHUB_ENV
          # gpg
          gpg --batch --pinentry-mode=loopback --yes --passphrase "$(echo -n "${GPG_PW}")" --import <(echo "${GPG_KEY}")
          echo "$(sed 's|\s||g' "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.finger"):6:" | gpg --import-ownertrust

      - name: Cache DL dependencies
        if: env.CACHE_DOWNLOAD == 'true' && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        uses: actions/cache@v3
        with:
          path: /workdir/DL
          key: ${{ runner.os }}-OpenWRT-SDK-DL-Cache-Makefile-${{ hashFiles('**/Makefile') }}
          #key: ${{ runner.os }}-DL-${{ github.ref_name }}-${{ hashFiles('Makefile') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-OpenWRT-SDK-DL-Cache-Makefile-
          #restore-keys: |
          #  ${{ runner.os }}-DL-${{ github.ref_name }}-${{ hashFiles('Makefile') }}-
          #  ${{ runner.os }}-DL-${{ github.ref_name }}-

      - name: Determine packages
        if: (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        shell: bash
        run: |
          _packages="$(ls -1 $GITHUB_WORKSPACE/feeds/packages/ | tr '\n' ' ')"
          _luci="$(ls -1 $GITHUB_WORKSPACE/feeds/luci/ | tr '\n' ' ')"
          PACKAGES="$_packages $_luci"
          echo "Building $PACKAGES"
          echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV

      - name: Build Packages
        if: (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        uses: muink/gh-action-sdk@master
        env:
          #ARCH: ${{ env.ARCH }}-v${{ env.VERSION }}
          ARCH: ${{ env.ARCH }}-${{ env.BRANCH }}-SNAPSHOT
          ARTIFACTS_DIR: /workdir
          FEED_DIR: ${{ github.workspace }}
          EXTRA_FEEDS: >-
            src-link|fantasticpackages_packages|/feed/feeds/packages/
            src-link|fantasticpackages_luci|/feed/feeds/luci/
          NO_REPO_FEEDS: 1
          NO_SHFMT_CHECK: 1
          PACKAGES: ${{ env.PACKAGES }}
          INDEX: 1
          KEY_BUILD: ${{ env.USIGN_KEY }}
          V: 99

      - name: Checkout Packages
        id: checkout_packags
        shell: bash
        if: (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        run: |
          sign_packages() {
            # gpg
            if [ "${{env.GPG_SIGN}}" == "true" ]; then
              gpg -u ${GPG_ID} --batch --pinentry-mode=loopback --yes --passphrase "$(echo -n "${GPG_PW}")" -a -o Packages.asc --detach-sign Packages
            fi
          }
          #
          mkdir -p "$GITHUB_WORKSPACE/$TPATH" 2>/dev/null
          if [ -d "/workdir/bin" ]; then
            sudo chown -R $USER:$GROUPS /workdir/bin
            rm -rf   "$GITHUB_WORKSPACE/$TPATH/$BRANCH/packages/$ARCH/packages" 2>/dev/null
            rm -rf   "$GITHUB_WORKSPACE/$TPATH/$BRANCH/packages/$ARCH/luci" 2>/dev/null
            mkdir -p "$GITHUB_WORKSPACE/$TPATH/$BRANCH/packages/$ARCH/" 2>/dev/null
            for EXTRA_FEED in $EXTRA_FEEDS; do
              feed=$(echo "$EXTRA_FEED" | cut -d'|' -f2)
              if [ -d "/workdir/bin/packages/$ARCH/$feed" ]; then
                echo "mv /workdir/bin/packages/$ARCH/$feed to $GITHUB_WORKSPACE/$TPATH/$BRANCH/packages/$ARCH/${feed#*_}"
                mv -f "/workdir/bin/packages/$ARCH/$feed" "$GITHUB_WORKSPACE/$TPATH/$BRANCH/packages/$ARCH/${feed#*_}"
                pushd "$GITHUB_WORKSPACE/$TPATH/$BRANCH/packages/$ARCH/${feed#*_}"; sign_packages; popd
              fi
            done
            #
            pushd "$GITHUB_WORKSPACE/$TPATH/$BRANCH"
            echo "$USIGN_PUBKEY" > ${USIGN_ID}.pub
          cat <<- EOF > ${USIGN_ID}.sh
          #!/bin/sh
          KEYID=${USIGN_ID}
          mkdir -p /etc/opkg/keys 2>/dev/null
          cat <<- PUBKEY > /etc/opkg/keys/\${KEYID,,}
          ${USIGN_PUBKEY}
          PUBKEY
          EOF
            if [ "${{env.GPG_SIGN}}" == "true" ]; then
              cp -f "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.finger" ${GPG_ID}.gpg.finger
              cp -f "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.pub" ${GPG_ID}.gpg.pub
              cp -f "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.rev" ${GPG_ID}.gpg.rev
            fi
            popd
          fi

      - name: Checkout Releases whitout compile
        id: checkout_releases_whitout_compile
        env:
          Branch: gh-pages
        shell: bash
        if: inputs.build_mode == 'build_imgs' && !cancelled()
        run: |
          git fetch --no-tags --prune --no-recurse-submodules --depth=1 origin $Branch
          git checkout origin/$Branch -- $TPATH/
          find $TPATH/* -maxdepth 0 2>/dev/null | grep -v "$BRANCH" | xargs -I{} rm -rf "{}"
          find $TPATH/$BRANCH/packages/* -maxdepth 0 2>/dev/null | grep -v "$ARCH" | xargs -I{} rm -rf "{}"

      - name: Display structure of downloaded files
        if: ${{ steps.checkout_packags.outcome == 'success' || steps.checkout_releases_whitout_compile.outcome == 'success' }}
        run: ls -R
        working-directory: ${{ env.TPATH }}

      - name: Determine packages be installed
        if: inputs.no_img == 0 && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_imgs') && !cancelled()
        shell: bash
        run: |
          INSTALLS="$(cat "$GITHUB_WORKSPACE/.github/workflows/prebuildpackages/$ARCH" | tr '\n' ' ')"
          echo "Installing $INSTALLS"
          echo "INSTALLS=$INSTALLS" >> $GITHUB_ENV

      - name: Build Images
        if: inputs.no_img == 0 && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_imgs') && !cancelled()
        uses: muink/gh-action-imagebuilder@master
        env:
          ARCH: ${{ env.TARGET }}-${{ env.SUBTARGET }}-${{ env.VERSION }}
          PROFILE: ${{ env.PROFILE }}
          ARTIFACTS_DIR: /workdir
          REPO_DIR: ${{ github.workspace }}
          EXTRA_REPOS: >-
            src|${{ env.PREFIX }}packages|file:///repo/${{ env.TPATH }}/${{ env.BRANCH }}/packages/${{ env.ARCH }}/packages
            src|${{ env.PREFIX }}luci|file:///repo/${{ env.TPATH }}/${{ env.BRANCH }}/packages/${{ env.ARCH }}/luci
          NO_LOCAL_REPOS: 1
          KEY_BUILD: ${{ env.USIGN_KEY }}
          KEY_BUILD_PUB: ${{ env.USIGN_PUBKEY }}
          PACKAGES: ${{ env.INSTALLS }}
          ROOTFS_SIZE: 256

      - name: Checkout Images
        shell: bash
        if: inputs.no_img == 0 && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_imgs') && !cancelled()
        run: |
          export PATH="$PATH:/workdir/imagebuilder-$VERSION-${TARGET//\//-}/staging_dir/host/bin"
          sudo chmod -R +x "/workdir/imagebuilder-$VERSION-${TARGET//\//-}/staging_dir/host/bin/"
          #
          if [ -d "/workdir/imagebuilder-$VERSION-${TARGET//\//-}" ]; then
            rm -rf   "$GITHUB_WORKSPACE/$TPATH/$BRANCH/targets/$TARGET" 2>/dev/null
            mkdir -p "$GITHUB_WORKSPACE/$TPATH/$BRANCH/targets/$TARGET" 2>/dev/null
            mv "/workdir/imagebuilder-$VERSION-${TARGET//\//-}/bin/targets/$TARGET/"* "$GITHUB_WORKSPACE/$TPATH/$BRANCH/targets/$TARGET/"
            pushd "$GITHUB_WORKSPACE/$TPATH/$BRANCH/targets/$TARGET"
            usign -S -m sha256sums -s <(echo "${USIGN_KEY}")
            if [ "${{env.GPG_SIGN}}" == "true" ]; then
              gpg -u ${GPG_ID} --batch --pinentry-mode=loopback --yes --passphrase "$(echo -n "${GPG_PW}")" -a -o sha256sums.asc --detach-sign sha256sums
            fi
            popd
          fi

      - name: Generate artifact name
        run: |
          echo "artifact=OpenWRT-Build-$VERSION-${TARGET//\//-}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact }}
          path: |
            ${{ env.TPATH }}/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
